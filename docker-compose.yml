# نظام المحاسبة - Docker Compose
# Accounting System - Docker Compose Configuration

version: '3.8'

services:
  # تطبيق نظام المحاسبة
  accounting-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: accounting-system-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_NAME=نظام المحاسبة
      - NEXT_PUBLIC_APP_VERSION=1.0.0
      - NEXT_PUBLIC_DEFAULT_LANGUAGE=ar
      - NEXT_PUBLIC_DEFAULT_CURRENCY=ريال
      - NEXT_PUBLIC_DEFAULT_CURRENCY_SYMBOL=ر.س
      - NEXT_PUBLIC_DEFAULT_TAX_RATE=15
    volumes:
      # ربط مجلد البيانات (اختياري)
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - accounting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # خادم ويب Nginx (اختياري)
  nginx:
    image: nginx:alpine
    container_name: accounting-system-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - accounting-system
    restart: unless-stopped
    networks:
      - accounting-network

  # قاعدة بيانات (اختيارية للمستقبل)
  # database:
  #   image: postgres:15-alpine
  #   container_name: accounting-system-db
  #   environment:
  #     POSTGRES_DB: accounting_system
  #     POSTGRES_USER: accounting_user
  #     POSTGRES_PASSWORD: secure_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - accounting-network

  # Redis للتخزين المؤقت (اختياري)
  # redis:
  #   image: redis:7-alpine
  #   container_name: accounting-system-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   networks:
  #     - accounting-network

networks:
  accounting-network:
    driver: bridge

volumes:
  # postgres_data:
  # redis_data:
  app_data:
